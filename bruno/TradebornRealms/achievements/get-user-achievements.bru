meta {
  name: Get User Achievements
  type: http
  seq: 3
}

get {
  url: {{baseUrl}}/api/achievements/user/{{userId}}
  body: none
  auth: bearer
}

headers {
  Authorization: Bearer {{authToken}}
}

tests {
  test("Status code is 200", function() {
    expect(res.status).to.equal(200);
  });
  
  test("Response contains user achievements with progress", function() {
    expect(res.body).to.have.property("success").that.equals(true);
    expect(res.body).to.have.property("data").that.is.an("array");
    
    // If we have achievements, verify their structure
    if (res.body.data.length > 0) {
      const userAchievement = res.body.data[0];
      expect(userAchievement).to.have.property("userId");
      expect(userAchievement).to.have.property("achievementId");
      expect(userAchievement).to.have.property("achievement");
      expect(userAchievement).to.have.property("progress").that.is.a("number");
      expect(userAchievement).to.have.property("progressMax").that.is.a("number");
      expect(userAchievement).to.have.property("unlocked").that.is.a("boolean");
      
      // Check achievement structure
      const achievement = userAchievement.achievement;
      expect(achievement).to.have.property("name");
      expect(achievement).to.have.property("description");
      expect(achievement).to.have.property("category");
    }
  });
}

docs {
  Returns all achievements for a specific user with their progress.
  
  This endpoint requires authentication and authorization (only the user themself or an admin can access).
  
  Variable requirements:
  - userId: The ID of the user whose achievements to retrieve
}